rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User profiles - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Pro profiles - publicly readable, only owner can write
    match /proProfiles/{profileId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == profileId;
    }
    
    // Jobs - public read for open jobs, owner can write
    match /jobs/{jobId} {
      allow read: if resource.data.status == 'open' || request.auth.uid == resource.data.customerUid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.customerUid;
      allow update: if request.auth != null && request.auth.uid == resource.data.customerUid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.customerUid;
    }
    
    // Leads - only involved parties can read/write
    match /leads/{leadId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.customerUid || 
         request.auth.uid == resource.data.proUid);
      allow create: if request.auth != null;
    }
    
    // Chat collections
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.members;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
    
    // Calendar events - only owner can read/write
    match /calendarEvents/{eventId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // ============= PAYMENT COLLECTIONS - READ ONLY FOR CLIENTS =============
    // All payment-related writes must be done via Cloud Functions for security
    
    // Payments - customers can read their payments, no client writes
    match /payments/{paymentId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerUid || 
         request.auth.uid == resource.data.proUid);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Transfers - involved parties can read, no client writes  
    match /transfers/{transferId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerUid || 
         request.auth.uid == resource.data.proUid);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Transactions - users can read their transactions, no client writes
    match /transactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Refunds - involved parties can read, no client writes
    match /refunds/{refundId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerUid || 
         request.auth.uid == resource.data.proUid);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Wallets - only owner can read, no client writes
    match /wallets/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Reviews - publicly readable, only reviewer can write their own
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reviewerUid;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.reviewerUid;
      allow delete: if false; // Reviews cannot be deleted
    }
    
    // Disputes - only involved parties can read/write
    match /disputes/{disputeId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerUid || 
         request.auth.uid == resource.data.proUid);
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.customerUid || 
         request.auth.uid == resource.data.proUid);
    }
  }
}